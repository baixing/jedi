"module path at 'path'"
"module fs at 'fs'"
"import OffsideRule from './offside'"
"import Expression from './expression'"
"import string, concat from './util'"
"export Parser, InstructionsProcessor, Sorter, TemplateMatcher"

ometa PlainParser <: OffsideRule {

	expr	=	Expression.expression,
	sym	=	Expression.symbol,
	
	load string:filename readFile(filename):content source(content):nodes
		->	[#document, [filename, 1, 1], content, undefined, nodes],

	ignore	=	'/' '/',
	indentChar	->	#tab,
	tabSize	->	0,

	parse :rule	=	position:pos apply(rule):x	->	[rule, pos].concat(x),
	error	=	offsetCol position:pos char*	->	[#Error, pos],

	processSection	=	jediSection | ^processSection,
	jediSection	=	parse('suppress')
		|	parse('inject')
		|	parse('text')
		|	parse('binding')
		|	parse('instruction')
		|	parse('fragment'),

	suppress	=	[suppressFlag spaces char*:x] :xs	->	[[x].concat(xs).map(string)],
	suppressFlag	=	'-' '-',	
				
	inject	=	[injectFlag spaces char*:x] block:b	->	[string(x), null, b],
	injectFlag	=	'-',	
					
	binding	=	[bindingPattern:e] block:b	->	[null, e, b],
	bindingPattern	=	bindingFlag spaces bindingArg:expr spaces	->	expr,
	bindingFlag	=	'=',
	bindingArg	=	expr | error,
		
	text	=	['\'' spaces char*:x] :xs	->	[undefined, [x].concat(xs).map(string)],
	text	=	[sym?:tag '"' spaces templateString:x] templateStrings:xs
			-> [tag, [x].concat(xs)],
	text	=	['\u2018' spaces char*:x] :xs
			-> [#Unicode, [x].concat(xs)],
	text	=	['\u201c' spaces templateString:x] templateStrings:xs
			-> [#Unicode, [x].concat(xs)],
//	templateStrings	=	[[anything*]*],
	templateString	=	(Expression.interpolation | stringLiteralSection)*,
	stringLiteralSection	=	<(Expression.escapedChar | ~'{' char)+:cooked>:raw
			-> [#String, string(cooked), string(raw)],
	templateStrings	=	[(skip | [templateString:x] -> x)*:y] -> y,
			
	fragment	=	[idName:id pseudoElement?:pe spaces pos:col offset(0, col):pos bindingPattern?:x] block:b
			-> [id, pe, x ? [[#binding, pos, null, x, b]] : b],
	pseudoElement	=	':' ':' simpleName,
		
	instruction	=	[instructionStart instructionPattern:x] block:b -> [x[0], x[1], b],
	instruction	=	[elementPattern:y offsetCol position:pos postInstruction:x] block:b
			-> [x[0], x[1], [
						[#element, pos, y, undefined, b]
					]],
	instructionStart	=	':',
		
	import_	=	"import" space+ char*:path	->	[#import, string(path)],
	if_	=	"if" spaces expr:x spaces	->	[#if, x],
	elseif_	=	"else if" spaces expr:x spaces	->	[#elseif, x],
	else_	=	"else" spaces	->	[#else],
	for_	=	"for" for_content:x ("," for_content)*:y	->[#for, [x].concat(y)],
	for_content	=	spaces Expression.bindingPattern:x spaces "in" spaces expr:y	->	[x, y],
	for_content	=	spaces expr:x	->	x,
	match_	=	"match" spaces expr:x	->	[#match, x],
	case_	=	"case" spaces expr:x	->	[#case, x],
	let_	=	"let" let_content:x ("," let_content)*:y	->[#let, [x].concat(y)],
	let_content	=	spaces Expression.bindingPattern:x spaces '=' spaces expr:y	->	[x, y],
	end_	=	"end" space+ instructionName:name spaces	->	[#end, name],
	external_	=	"external" space+ sym:x (spaces ',' spaces sym)*:xs spaces	->	[#external, [x].concat(xs)],
	
	instructionPattern	=	import_
		|	if_ | elseif_ | else_
		|	for_
		|	match_ | case_
		|	let_
		|	end_
		|	external_,
	instructionPattern	=	instructionName:name spaces instructionParam:param spaces	->	[name, param],
	instructionName	=	sym,
	instructionParam	=	expr,
	
	postInstruction	=	if_ | for_ | let_ | else_,
		
	END
}

ometa Parser <: PlainParser {

	jediSection	=	parse('comment')
		|	parse('attribute')
		|	parse('macro')
		|	^jediSection
	//	|	parse('endElement')
		|	parse('element'),
		
	comment	=	[commentFlag spaces char*:x] :xs	->	[[x].concat(xs).map(string)],
	commentFlag	=	'!',	
				
	macro	=	[macroStart macroPattern:x] block:b	->	x.concat([b]),
	macroStart	=	':' ':' spaces,	
	macroPattern	=	elementPattern:sel spaces macroParam:param spaces	->	[sel, param],
	macroParam	=	Expression.tuplePattern,	
				
	element	=	[elementPattern:e bindingPattern?:b] block:children	->	[e, b, children],
	element	=	[elementPattern:e childCombinator offsetCol char+:rest]
			parse('element', rest):child
			-> [e, undefined, [child]],
	element	=	[elementPattern:e offsetCol char+:rest]
			parse('text', rest):child
			-> [e, undefined, [child]],
	element	=	[elementPattern:e offsetCol attributes:attrs] block:children
			-> [e, undefined, attrs.concat(children)],
		
	elementPattern	=	tagName:tag classList:cls idName?:id spaces	->	[tag, cls, id],
	simpleName	=	(Expression.escapedChar
				| ~(space|'.'|'#'|':'|'='|'@'|'\''|'"'|'!') char)+:x
			-> string(x),
	tagName	=	simpleName,
	aclass	=	'.' simpleName,
	classList	=	aclass*,
	idName	=	'#' simpleName,
		
	childCombinator	=	'>' spaces,
	attributes	=	(
				position:pos
				attributeFlag attrName:attr
				(assignOperator:op
					(Expression.expression | Expression.interpolation):expr
					-> [op, expr])?:assign
				spaces
				-> [#attribute, pos, attr].concat(assign)
			)*,
		
	attribute	=	[attributeFlag attrName:attr assignOperator?:op char*:x] :xs
			aexpr([].concat.apply(x, xs)):expr
			-> [attr, op, expr],
	attributeFlag	=	'@',
	attrName	=	(~(space | assignOperator | '@') char)+:x -> string(x),
	assignOperator	=	spaces <('+' | '-' | '^' | '$')? '='>:x spaces -> x,
		
	aexpr	=	[spaces]	->	undefined
		|	[spaces (Expression.expression | Expression.interpolation):x spaces]	->	x
		|	error,

	END
}

Parser.initialize = function() {
	PlainParser.initialize.apply(this)
	this.readFile = function(filename) {
		if (!fs.existsSync(filename)) {
			filename += '.jedi'
		}
		this.filename = filename
		console.log('read ', filename)
		return fs.readFileSync(filename).toString()
	}
}


/*

	bindingForm = bindingOp spaces Expression.expression:x spaces ("use" bindingNames:y)? -> [x, y],
	parameters = listOf('identifier', ','),
	bindingNames = parameters | '(' spaces parameters:x spaces ')' -> x,
}

ometa Translator {

	filter = [':' structure:x] :y -> [#Filter, x, y],

	structure = "if" expression:x -> [#If, x],
	structure = "else" -> [#Else],
	structure = "case" expression:x -> [#Case, x],
	structure = "for" forBindings:x expression:y -> [#For, x, y],

	forBindings = identifier "in",
	forBindings = identifier ":" identifier "in",
	forBindings = identifier "of",
	forBindings = identifier "," identifier "of",
}
*/

/*
a every x -> x * 2

a some (x -> x > 2

test (x in 1...3) ->
test (number x) -> x + 1
test (boolean x) -> !x

position (x, y)
position (x:left, y:top)

p:point = position (x = left, y = top)

def position (x, y)

def f (a1, a2 = 3, ...args)
def f (a1 = 1, a2, ...args)


f (1)

f (a1 = 1, a2 = 2,
*/