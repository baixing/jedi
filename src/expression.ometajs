"import string, toUTF16 from './util'"
"import UnicodeText from './text'"
"export Expression"

ometa Expression {

	keyword	=	("not" | "if" | "then" | "else" | "mod" | "div" | "mul" | "&&" | "-") ~nameChar,
	primary	=	literal | listLiteral | tupleLiteral | path | symbol,
		
	symbol	=	('*' | ~keyword nameChar+):s -> [#Symbol, string(s)],
	nameChar	=	UnicodeText.nameChar | '$',

	path = symbol?:start segment+:segments
		-> [#Path, start].concat(segments),
	segment = '/' <segmentChar*>,
	segmentChar = ~(space | ambigSep | '/' | '?' | '#') char,
	ambigSep = (',' | ']' | ')') (space | end),

	literal = nullLiteral | booleanLiteral | numberLiteral
		| stringLiteral | quasiLiteral,

	nullLiteral "null" -> [#Null],

	booleanLiteral "true" -> [#True],
	booleanLiteral "false" -> [#False],

	numberLiteral "NaN" -> [#NaN],
	numberLiteral "INF" -> [#PosInf],
	numberLiteral "+INF" -> [#PosInf],
	numberLiteral "-INF" -> [#NegInf],
	numberLiteral "∞" -> [#PosInf],
	numberLiteral "+∞" -> [#PosInf],
	numberLiteral "-∞" -> [#NegInf],
	
	numberLiteral <signedInt ('.' digit+)? ('e' signedInt)?>:n
		-> [#Number, parseFloat(string(n))],
	signedInt = <('+' | '-')? digit+>,

	stringLiteral
		'\''
		(~'\'' char | '\'' '\'' -> '\'')*:s
		'\''
		-> [#String, string(s)],

	quasiLiteral
		symbol?:tag
		'"'
		(interpolation | stringLiteralSection)*:s
		'"'
		-> [#Quasi, tag, s],
	interpolation = '{' expression:expr '}' -> expr,
	stringLiteralSection = <(escapedChar | ~('"' | '{') char)+:cooked>:raw
		-> [#String, string(cooked), string(raw)],

	escapedChar '\\' 'b' -> '\u0008',
	escapedChar '\\' 't' -> '\u0009',
	escapedChar '\\' 'n' -> '\u000a',
	escapedChar '\\' 'v' -> '\u000b',
	escapedChar '\\' 'f' -> '\u000c',
	escapedChar '\\' 'r' -> '\u000d',
	escapedChar '\\' <hex hex? hex? hex? hex? hex?>:u space?
		-> toUTF16(parseInt(string(u), 16)),
	escapedChar '\\' 'u' <hex hex hex hex>:u
		-> String.fromCharCode(parseInt(string(u), 16)),
	escapedChar '\\' 'u' '{' <hex+>:u '}'
		-> toUTF16(parseInt(string(u), 16)),
	escapedChar '\\' char:c -> c,
	hex = char:c ?/[0-9a-f]/i.test(c),

	listLiteral =
		'[' spaces
		(listItem:item comma -> item)*:x listItem?:y
		spaces ']'
		-> [#List, y ? x.concat([y]) : x],
	listItem = expression,

	tupleLiteral =
		'(' spaces
		(tupleItem:item comma -> item)*:x tupleItem?:y
		spaces ')'
		-> [#Tuple, y ? x.concat([y]) : x],
	tupleItem = mapping | expression,
	mapping = symbol:name spaces ':' spaces expression:expr -> [#Mapping, name, expr],

	bindingPattern = tuplePattern | listPattern | symbol,
	listPattern =
		'[' spaces
		(bindingPattern:item comma -> item)*:x bindingPattern?:y
		spaces ']'
		-> [#ListPattern, y ? x.concat([y]) : x],
	tuplePattern =
		'(' spaces
		((bindingPattern | mappingPattern):item comma -> item)*:x bindingPattern?:y
		spaces ')'
		-> [#TuplePattern, y ? x.concat([y]) : x],
	mappingPattern = symbol:name spaces ':' spaces bindingPattern:bind -> [#MappingPattern, name, bind],

	comma = spaces ',' spaces,

	binOp string:left string:op string:right = apply(left):x,

	// x.name | x?.name
	refExp = refExp:x (``.'' | ``?.''):op symbol:name -> [op, x, name],
	// x(y) | x [y]
	refExp = refExp:x spaces (tupleLiteral | listLiteral):y -> [#Call, x, y],
	refExp = refExp:x space+ primary:y -> [#Call, x, y], // x y
	refExp = primary,
	refExp = exp9,

	rangeExp = refExp:x spaces (``...'' | ``..<''):op spaces refExp:y -> [op, x, y],
	rangeExp = refExp,

	concatExp = concatExp:x "++" exp1 -> [#Concat, x, y], // x ++ y

	expression = conditionExpr,
	conditionExpr = "if" spaces exp1:x spaces "then" spaces exp1:y spaces ("else" spaces conditionExpr:z)?
		->	[#Ternary, x, y, z] | exp1,
	exp1 = exp1:x op1:op exp2:y -> [#BinaryOp, op, x, y] | exp2,
	exp2 = exp2:x op2:op exp3:y -> [#BinaryOp, op, x, y] | exp3,
	exp3 = exp3:x op3:op exp4:y -> [#BinaryOp, op, x, y] | exp4,
	exp4 = exp4:x op4:op exp5:y -> [#BinaryOp, op, x, y] | exp5,
	exp5 = exp5:x op5:op exp6:y -> [#BinaryOp, op, x, y] | exp6,
	exp6 = exp6:x op6:op exp7:y -> [#BinaryOp, op, x, y] | exp7,
	exp7 = exp7:x op7:op exp8:y -> [#BinaryOp, op, x, y] | exp8,
	exp8 = rangeExp,
	exp9 = op9:op refExp:x -> [#UnaryOp, op, x] | refExp,

	op1 = spaces ("->" | "<-"):x spaces -> x,
	op2 = spaces ("||" | "&&"):x spaces -> x,
	op3 = spaces ("===" | "!==" | "==" | "!=" | "<=>" | ">=" | "<=" | ">" | "<"):x spaces -> x,
	op4 = spaces ("<<<" | ">>>" | "<<" | ">>"):x spaces -> x,
	op5 = spaces ("?:"):x spaces -> x,
	op6 = spaces ("+" | "-"):x spaces -> x,
	op7 = spaces ("×" | "÷" | "mul" | "div" | "mod"):x spaces -> x,
	op9 = spaces ('!' | "not"):x spaces -> x,

	END
}

