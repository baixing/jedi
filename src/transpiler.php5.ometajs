"import string, concat, flattenLines, isCharArray, dir, flattenArray from './util'"
"export PHP5Transpiler, Beautify"

ometa Beautify {
	document = lines:x -> deleteRedundantEcho(x),
	lines newline:nl	=	string:s	->	s.split(nl),
	newline	->	/\r?\n/,
	
	END
}

ometa PHP5Transpiler {

	document = [#document [string:filename number number] string:source undefined topBlock:xs] -> (
		'<?php\n' +
		//flattenString(x) +
		flattenLines(xs).join('\n') +
		'\n?>'),

	topBlock = [ignore*:x doctype:y node*:xs] -> x.concat(y, xs),
	block = [node*:x] -> x,

	ignore	=	[char*:s]	->	string(s), // empty or ignore

	node ignore,
	node [#closeStartTag] -> "echo '>';",
	node [string:nodeType [number number] apply(nodeType):x] -> x,
	node :unknown -> ['/*', JSON.stringify(unknown), '*/'],

	Section :head :body -> ['/* Unknown section: ', JSON.stringify(string(head)), ' ... */'],

	doctype = [#comment [number number] [output:x]] -> x | -> ["echo '<!doctype html>', \"\\n\";"],
	output = [outputMethod:x] -> x,
	outputMethod spaces ("html" spaces? "5"?) spaces -> ["echo '<!doctype html>', \"\\n\";"],

	tupleItem [#Mapping [#Symbol :key] trans:expr] -> ("'" + key + "' => " + expr),
	
	
	literal [#Null]	->	'null',
	literal [#True]	->	'true',
	literal [#False]	->	'false',
	literal [#NaN]	->	'NAN',
	literal [#PosInf]	->	'+INF',
	literal [#NegInf]	->	'-INF',
	literal [#Number :n]	->	String(n),
	
	stringLiteral [#String :s]	->	("'" + s.replace(/'/g, "\\'") + "'"),	
	templateLiteral [#Quasi undefined [trans*:list]]	->	('(' + list.join(') . (') + ')'),
	listLiteral [#List [expr*:list]]	->	('[' + list.join(', ') + ']'),
	
	//call ["." [#Symbol 'url'] [#Symbol 'static']]	-> 'UrlBuilder::staticResource',
	call ["." [#Symbol :s externalSymbol(s):x] [#Symbol :y]]	-> (x + '::' + y),
	call ["." expr:x [#Symbol :y]]	->	(x + '->' + y),
	
	call [#Call [#Symbol :s externalSymbol(s):x] &[#Tuple :_] trans:y]	->	(x + y),
	call [#Call [#Symbol :s externalSymbol(s):x] trans:y]	->	(x + '(' + y + ')'),
	call [#Call trans:x [#List [trans:y]]]	->	(x + '[' + y + ']'),
	call [#Call trans:x &[#Tuple :_] trans:y]	->	(x + y),
	call [#Call trans:x trans:y]	->	(x + '(' + y + ')'),
	
	range ['...' trans:x trans:y]	->	('(range(' + x + ', ' + y + '))'),
	range ['..<' trans:x trans:y]	->	('(range(' + x + ', ' + y + ' - 1))'),
	bin [#BinaryOp 'mod' trans:x trans:y]	->	('(' + x + ' ' + '%' + ' ' + y + ')'),
	bin [#BinaryOp 'div' trans:x trans:y]	->	('(' + x + ' ' + '/' + ' ' + y + ')'),
	bin [#BinaryOp 'mul' trans:x trans:y]	->	('(' + x + ' ' + '*' + ' ' + y + ')'),
	bin [#BinaryOp :op trans:x trans:y]	->	('(' + x + ' ' + op + ' ' + y + ')'),
	bin [#UnaryOp :op trans:x]	->	('!' + x),
	symbol [#Symbol '*']	->	'$context',
	symbol [#Symbol :s externalSymbol(s):x]	->	x,
	symbol [#Symbol :s resolve(s):x]	->	x,
	
	ternary [#Ternary expr:x expr:y undefined]	->	('(' + x + ') ? (' + y + ') : null'),
	ternary [#Ternary expr:x expr:y expr:z]	->	('(' + x + ') ? (' + y + ') : (' + z + ')'),
	
	expr	=	literal | stringLiteral | templateLiteral | listLiteral | symbol | call | range | bin | ternary,
	
	trans	=	expr,
	
	trans [#String :s :raw]	->	("'" + s.replace(/'/g, '\\\'') + "'"),
	trans [#Tuple [trans*:list]]	->	('(' + list.join(', ') + ')'),
	trans [#Tuple [tupleItem*:list]]	->	('[' + list.join(', ') + ']'),
	trans :unknown	->	['/*', JSON.stringify(unknown), '*/'],
	//trans [trans*:x] -> ( x ),
	

	comment [:line] -> ["echo '<!-- " + escapeComment(simpleString(line)) + " -->';"],
	comment [echoComment*:xs] -> [].concat(
			"echo '<!--', \"\\n\";",
			xs,
			"echo '-->';"
		),
	echoComment [char*:s] -> ("echo '" + escapeComment(simpleString(s)) + "', \"\\n\";"),

	text stringLiteral:s	->	['echo ' + escapeText(s) + ';'],
	text templateLiteral:s	->	['echo htmlspecialchars(' + s + ');'],
	text undefined [textLine*:lines]	->	echoLines(lines),
	text undefined [echoTemplateString*:lines]	->	lines,

	textLine string:s	->	("'" + escapeText(simpleString(s)) + "', \"\\n\""),
	echoTemplateString [] -> '',
	echoTemplateString [trans+:exprList] -> ('echo htmlspecialchars((' + exprList.join(') . (') + '));'),
	//	-> dom.text(lines),

	element [:tag :cls :id] undefined
		{startTag(tag, cls, id)}:startT
		enterBlock([]) &anything:children block:body exitBlock:param
		{endTag(tag)}:endT
		-> this.elementOutput(tag, cls, id, undefined, children, body, startT, endT, param),

	element [:tag :cls :id] trans:bind
		{startTag(tag, cls, id)}:startT
		enterBlock([]) &anything:children block:body exitBlock:param
		{endTag(tag)}:endT
		-> this.elementOutput(tag, cls, id, bind, children, body, startT, endT, param),


	attribute :name undefined undefined	->	["echo ' " + name + "';"],
	attribute :name undefined	->	["echo ' " + name + "';"],
	attribute :name :op undefined	->	["echo ' " + name + "';"],
	attribute :name :op [#String :s] -> ["echo ' " + name + '="' + "" + attrValue(simpleString(s)) + "\"';"],
	attribute :name :op [#Quasi undefined echoTemplateString:line] -> ["echo ' " + name + '="' + "';",  line, "echo '\"';"],
	attribute :name :op trans:exp -> ["echo ' " + name + '="' + "', htmlspecialchars(" + exp + "), '\"';"],
	
	binding :_ trans:expr [] -> ['echo htmlspecialchars(' + expr + ');'],
	//binding trans:expr [] -> ["$__temp = " + expr + "; if (method_exists($__temp, '__toString')) echo htmlspecialchars($__temp); else print_r($__temp);"],
	binding :_ trans:expr enterBlock([]) block:body exitBlock:param
		-> closure(expr, body, param),

	instruction #external [[#Symbol :x saveExternalSymbol(x)]+] :_	->	'// external\n',
	
	instruction #if trans:expr block:b -> ["if (" + expr + ") {", b, "}"],
	instruction #elseif trans:expr block:b -> ["else if (" + expr + ") {", b, "}"],
	instruction #else :_ block:b -> ["else {", b, "}"],
	
	instruction #let [([bindingPattern:bind trans:expr] -> [bind, expr])+:binds] enterBlock(collectSymbols(binds)) block:b exitBlock:param
		->	assignment(binds, b, param),
	instruction #for [([bindingPattern:bind trans:expr] -> [bind, expr])+:binds] enterBlock(collectSymbols(binds)) block:b exitBlock
		->	translateMultiLoops(binds, b),
		
	instruction #unsafe trans:x :b -> ('echo ' + x + ';'),

	bindingPattern [#Symbol :v] -> [[v], '$' + v],
	bindingPattern [#TuplePattern [[#Symbol :key] [#Symbol :value]]] -> [[key, value], '$' + key + ' => $' + value],

	suppress :lines -> (lines.map(function(line){ return '// ' + line })),
	fragment :name :_ block:b -> ['//  #' + name, b],
	macro :elementPattern paramPattern:parameter enterBlock(parameter) block:body exitBlock:free saveMacro(elementPattern, parameter, body, free)
		-> ['// define ' + elementPattern],

	paramPattern [#TuplePattern [([#Symbol :name] -> name)*:names]] -> names,

	endElement -> '',

	inject :x :y [string*:lines] -> [x + ';'].concat(lines.map(function(l){ return '//' + l })),
	inject :x :y block:body -> [x, '{', body, '}'],
	/*filter [#Symbol [``if'']] [spaces Expression.expression:exp node(exp):x] block:body
		-> ['if (' + x + ') {', body, '}'],
	filter [#Symbol [``else'']] :x block:body
		-> ['else {', body, '}'],

	Quasi :tag [trans*:templateStrings]
		-> [echo(closeStartTag()) + "Jedi::Quasi(" +
			(tag ? "'" + tag.join('') + "'": null) +
			", " +
			templateStrings.join(', ') +
			');'],

	//directive :type [apply(type):x] -> x,
	//node = directive (#Comment | #Suppress | #Inject | #Element | #Text | #Filter)
	//Element :tag [:cls, :id] :body ->*/

	END
}


PHP5Transpiler.initialize = function() {
	this._stack = [['page']]
	
	this.enterBlock = function(bindings) {
		this._stack.unshift(bindings)
	}
	this.exitBlock = function() {
		var needImport = this._stack[0].needImport || []
		this._stack.shift()
		return needImport
	}
	this.resolve = function(symbol) {
		ans = '';
		for (var i = 0; i < this._stack.length; i++) {
			if (this._stack[i].indexOf(symbol) >= 0)  {
				var ans = '$' + symbol
				var importSymbol = symbol
				var level = i
				break
			}
		}
		if (ans == '') {
			ans = '$data->' + symbol
			importSymbol = 'data'
			var level = i
		}
		for (var i = 0; i < level; i++) {
			if (this._stack[i].needImport === undefined) this._stack[i].needImport = [importSymbol]
			else this._stack[i].needImport.push(importSymbol)
		}
		return ans
	}
	this.saveExternalSymbol = function (symbol) {
		if (this._stack[0].externals === undefined) this._stack[0].externals = [symbol]
		else this._stack[0].externals.push(symbol)
	}
	this.externalSymbol = function(symbol) {
		for (var i = 0; i < this._stack.length; i++) {
			var e = this._stack[i].externals || []
			if (e.indexOf(symbol) >= 0) return symbol
		}
		throw fail
	}
	 
	this.saveMacro = function(elementPattern, parameter, body, free) {
		if (this._stack[0].macros === undefined) this._stack[0].macros = []
		this._stack[0].macros.push([elementPattern, parameter, body, free])
	}
	this.elementOutput = function (tag, cls, id, bind, children, body, startT, endT, param) {
		if (bind === undefined) return [startT, body, endT]
		dir(children)
		var overrided = children.some(function(node){
			//console.log(node)
			return ['element', 'text', 'comment', 'instruction'].indexOf(node[0]) >= 0
		})
		if (overrided) return closure(bind, [startT, body, endT], param)
		else {
			var m = this.findMacro(tag, cls, id, bind)
			if (m) {
				return closure(bind, [startT, m[2], endT], m[3]) // || ['//call macro']
			} else {
				return closure(bind, [startT, "echo '>', htmlspecialchars($context);", endT], param)
			}
		}
	}
	this.findMacro = function (tag, cls, id, param) {
		for (var n = 0; n < this._stack.length; n++) {
			if (this._stack[n].macros)
				for (var i = 0; i < this._stack[n].macros.length; i++) {
					var m = this._stack[n].macros[i]
					var elemPattern = m[0]
					if (elemPattern[0] === tag &&
						elemPattern[1].every(function(c){ return cls.indexOf(c) >= 0 })) {
						return m
					}
				}
		}
		/*return [
			['closeStartTag'],
			['text', [0, 0], undefined, [['Symbol', '*']]]
		]*/
	}
	
}

function echo() {
	var args = [].slice.call(arguments).reduce(function(a, b){
		if (isCharArray(b)) b = b.join('')
		if (typeof b === 'string' && typeof a[a.length - 1] === 'string') {
			a[a.length - 1] += b
		} else {
			a.push(b)
		}
		return a
	}, []).map(function(o){
		if (typeof o === 'string') {
			return "'" + o.replace(/'/g, "\\'") + "'"
		}
		return JSON.stringify(o)
	})
	return 'echo ' + args.join(', ') + ';'
}

function deleteRedundantEcho(lines) {
	for (var i = 1; i < lines.length; i++) {
		if (lines[i].match(/^\s*echo/) && (lines[i - 1].match(/^\s*echo/) || lines[i - 1].match(/^\s*,/))) {
			lines[i - 1] = lines[i - 1].substring(0, lines[i - 1].length - 1)
			lines[i] = lines[i].replace('echo', ',')
		}
	}
	var ans = ''
	for (var i = 0; i < lines.length; i++) {
		ans += lines[i] + '\n'
	}
	return ans
}

function echoLines(lines) {
	var n = lines.length
	return lines.map(function(l, i) {
		return (i > 0 ? '     ' : 'echo ') + l + (i < n ? ',' : ';')
	})
}

function translateMultiLoops(binds, b) {
	if (binds.length > 0) {
		var bind = binds.shift();
		return ["foreach (" + bind[1] + " as " + bind[0][1] + ") {", translateMultiLoops(binds,b), "}"]
	}
	return b;
}

function escapeComment(s) {
	// http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#comments
	// Comment must not contain two consecutive U+002D HYPHEN-MINUS characters (--)
	return s.replace(/--/g, '- -')
}
function escapeText(s) {
	return s.replace(/&/g, '&amp;').replace(/</g, '&lt;')
}
function simpleString(s) {
	return string(s).replace(/'/g, "\\'")
}
function attrValue(s) {
	return s.replace(/&/g, '&amp;').replace(/"/g, '&quot;')
}

function startTag(tag, cls, id) {
	var r = echo(
		"<", tag,
		cls.length > 0 ? ' class="' + cls.join(' ') + '"': '',
		id ? ' id="' + id + '"' : '')
	return r
}
var voidElements = 'area,base,br,col,command,embed,hr,img,input,keygen,link,meta,param,source,track,wbr'.split(',')
function endTag(tag) {
	if (voidElements.indexOf(tag) >= 0) return []
	return echo('</', tag, '>')
}

function unique(param) {
	var result = [];
	for (var i=0; i < param.length; i++) {
		if (result.indexOf(param[i]) == -1) result.push(param[i])
	}
	return result
}

function phpVariable(param) {
	return '$' + param
}

function getImportString(param) {
	var result = unique(param)
	result = result.map(phpVariable)
	return param.length > 0 ? ' use (' + result.join(',') + ')' : ''
}

function closure(context, body, param) {
	return [
		'call_user_func(function ($context)' + getImportString(param) + ' {',
		body,
		'}, ' + context + ');'
	]
}

function collectSymbols(binds) {
	return flattenArray(binds.map(function(b){
		return b[0][0]
	}))
}
	
function assignment(binds, body, param) {
	var key = '', value = ''
	for (var i = 0; i < binds.length; i++) {
		key += binds[i][0][1]
		value += binds[i][1]
		if (i < binds.length - 1) {
			key += ','
			value += ','
		}
	}
	return [
		'call_user_func(function(' + key + ')' + getImportString(param) + ' {',
		body,
		'}, ' + value + ');'
	]
}

function htmlComment(lines) {
	return '<!--'
}


